# Base Builder Class
DotNet.DefaultSDK=(Standaard)
DotNet.ExecutionFailed=Uitvoeren van commando mislukt
DotNet.NoWorkspace=Geen workspace beschikbaar
DotNet.ScriptCreationFailed=Aanmaken van commandoscript mislukt
DotNet.ScriptDeletionFailed=Verwijderen van commandoscript ({0}) mislukt
DotNet.ToolConfigurationNeeded=; overweeg om .NET SDKs op te zetten als globale tools in Jenkins
DotNet.ToolSelectionNeeded=; stel het gebruik van een specifieke .NET SDK in
DotNet.Verbosity.Quiet=Stil (q)
DotNet.Verbosity.Minimal=Minimaal (m)
DotNet.Verbosity.Normal=Normaal (n)
DotNet.Verbosity.Detailed=Gedetailleerd (d)
DotNet.Verbosity.Diagnostic=Diagnostiek (diag)

# Builder: Build Project
DotNetBuild.DisplayName=.NET: Project bouwen (build)

# Builder: Clean Project Output
DotNetClean.DisplayName=.NET: Project opruimen (clean)

# Builder: Show Dependencies
DotNetListPackage.DisplayName=.NET: Afhankelijkheden tonen (list package)

# Builder: Create Package
DotNetPack.DisplayName=.NET: NuGet package aanmaken (pack)

# Builder: Restore Project Dependencies
DotNetRestore.DisplayName=.NET: Afhankelijkheden herstellen (restore)

# Global Tool: .NET SDK
DotNetSDK.DisplayName=.NET SDK
DotNetSDK.ExecutableNotFound=Kon het dotnet programma niet vinden voor SDK ‘{0}’
DotNetSDK.NoNode=Kon het dotnet programma niet vinden omdat de node offline lijkt te zijn
DotNetSDK.UnknownSDK=Geen .NET SDK gevonden met naam ‘{0}’

# Builder: Run Tests
DotNetTest.DisplayName=.NET: Unit tests uitvoeren (test)

# Build Wrappper
DotNetWrapper.DisplayName=.NET gebruiken
DotNetWrapper.NoSDK=Geen .NET SDK opgegeven
